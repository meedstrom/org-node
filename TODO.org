* To reduce LoC

- Unify some subroutines for capture/refile/extract/insert/find

- Upstream some stuff to Org

  - =org-node-narrow-to-drawer-p=

  - =org-node--end-of-meta-data= (actually patch =org-end-of-meta-data=)

- =org-node--with-quick-file-buffer= merge with =org-node--work-buffer-for= ??

- =org-node--in-files-do=: rewrite to use built-in fileloop.el ??

  - Possibly upstream some functionality to Emacs core such we don't need =org-node--find-file-noselect=.

- Maybe merge =org-node-refile= with =org-node-extract-subtree= or reuse code between them?

* Other

- Let user preview the filename that will be created.  (Currently, when option =org-node-ask-directory= is t, it just asks you for a directory, which is weirdly restrictive.)

- Make =org-node-list-files= pop open a find-dired buffer.

- Make a command akin to =org-node-lint-all-files=, but that just runs =org-element-parse-buffer= with =org-element--cache-diagnostics= on, then prints those diagnostics.

  - Bonus: if we ensure the parse-trees stay cached, then every Org file just might become /way/ faster to open!  Speeding up the agenda etc.

- Make =org-node-capture-target= a bit more robust and not need =:empty-lines after 1=.

- Do not let main org-node.el load Org.  That way, you could use =org-node-find= early at init, before Org has loaded.

- Help Embark and Marginalia integrate more deeply with =org-node-read= / =org-node-collection=

  - Not sure I understand "completion categories", but IIUC, we don't really have a completion-category representing "an Org entry somewhere /which is not necessarily in the current buffer"/.

    Might need agreement with upstream Org for the shape of a data object representing that?  Something like [[https://github.com/meedstrom/indexed/blob/main/indexed.el][indexed.el]]'s struct =indexed-org-entry=?  Once that's in, then embark and such packages could easily build in handlers for that, then org-roam and such packages can automatically benefit if they translate from their internal data objects.

- Implement a =:MODIFIED:= property

  - Easy to build on the =org-node-backlink--flag-buffer-modification= we already have.

- Get https://github.com/nobiot/org-transclusion/pull/268 into upstream and update command =org-node-insert-transclusion-as-subtree= to use it.

- Let =org-node-grep= obey =org-node-filter-fn=

- Make =org-node-rename-asset-and-rewrite-links= easier to use

- Write a glossary, to clarify e.g. what is a "ref" vs "reflink"

- =org-node-seq-dispatch=: Free up keys "j", "n", "p", "c"

- A workflow to allow *untitled nodes*

  (technically not untitled; the title would be an auto-assigned number)

  Already =org-node-grep= can be considered an equivalent to =org-node-find= (except it does not create new nodes).  We "just" need an equivalent to =org-node-insert-link=.  Basically, capture, refile, and insert-link would probably all reuse a subroutine for *identifying a node by a grep result.*

- More =org-node-seq-defs= wrappers:

  - A wrapper that looks at a given "master node" that defines a seq: links in the body text become the seq.

  - A wrapper that defines a seq as simply the files in a given subdirectory.

- Count some ref variants as the same ref

  If a roam-ref exists like =//www.website.com=, allow counting a link =//www.website.com?key=val&key2=val2#hash= as a reflink to the same, unless the latter has a roam-ref of its own.

  Would prolly be a fairly expensive operation.  After building tables ref<>id and dest<>links, run thru every dest and check if an existing ref is a prefix of it, then simply nconc the value with the value for the corresponding dest.  But having to check for other dests that may also be a prefix is where it would get expensive... O(n^2) I guess.

  Hm... Sort all dests alphabetically.  All near-matches will be very close to each other, and indeed an alphabetic sort even results in a sort-by-length within each possible "group".  So just run down progressively shorter prefixes until the length goes up again, then we know we're in another group.  Rough idea, but O(n^2) looks beatable.
